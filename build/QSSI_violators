#!/bin/sh

# This script parses the ninja file and finds all QSSI violators if no component name is given; else finds violators based on component related string given as argument.
# Run the script from the root directory of your workspace.
# To know the usage, type ./QSSI_violators --help

QSSI_WHITELIST_FILE="$QCPATH/release/QSSI/QSSI_whitelist.txt"
QSSI_ENFORCED_FILE="$QCPATH/release/QSSI/QSSI_enforced_projects.txt"
QSSI_VIOLATORS_OUTPUT_FILE="$OUT/QSSI_violators.txt"

AWK=`which awk`
AWK=${AWK:-awk}
CAT=`which cat`
CAT=${CAT:-cat}
ECHO=`which echo`
ECHO=${ECHO:-echo}
GREP=`which grep`
GREP=${GREP:-grep}
MV=`which mv`
MV=${MV:-mv}
RM=`which rm`
RM=${RM:-rm}
SED=`which sed`
SED=${SED:-sed}
SORT=`which sort`
SORT=${SORT:-sort}
TOUCH=`which touch`
TOUCH=${TOUCH:-touch}

ninja_split()
{
  ${RM} -f $3
  ${CAT} $2 | ${AWK} -v pstr=$1 '
    BEGIN {c=0;m=0;i=0;mstr="";istr="";
           if (match(pstr, "host")) {pmatch="out/";}
           else {pmatch="out/target/product/([[:alnum:]]|_)+/";}
          }
    /^ command = / {c=1;mstr="";istr="";}
    /--makefile /  {if (c==1) {
                      idx=match($0, "--makefile ([[:graph:]]+)");
                      if (idx) {mstr=substr($0, RSTART+11, RLENGTH-11);m=1;}
                    }
                   }
    /Install: /    {if (m==1) {
                      idx=match($0, "Install: ([[:graph:]]+)");
                      if (idx) istr=substr($0, RSTART+9, RLENGTH-9);
                      idx=match(istr, pmatch pstr);
                      if (idx && (mstr!="")) {print mstr " " istr;}
                    }
                    c=0;m=0;
                   }
  ' > $3.tmp

  ${CAT} $2 | ${GREP} "rspfile_content" | ${GREP} '"class":' | ${SED} 's#\\n#\n#g' | ${AWK} -v pstr=$1 '
    BEGIN {c=0;m=0;i=0;mstr="";istr="";
           if (match(pstr, "host")) {pmatch="out/";}
           else {pmatch="out/target/product/([[:alnum:]]|_)+/";}
          }
    /"class": \[/       {c=1;mstr="";istr="";}
    /"path": \[/        {if (c==1) {
                         idx=match($0, "[[:punct:]]path[[:punct:]]: [[[:punct:]]([[:graph:]]+)");
                         if (idx) {mstr=substr($0, RSTART+10, RLENGTH-12);m=1;}
                         }
                        }
    /"installed": \[/   {if (m==1) {
                         idx=match($0, "[[:punct:]]installed[[:punct:]]: [[[:punct:]]([^]]+)");
                         if (idx) {istr=substr($0, RSTART+14, RLENGTH-16);m=1;}
                         idx=match(istr, pmatch pstr);
                         if (idx && (mstr!="")) {gsub(","," ",istr);gsub("\"","",istr);split(istr,iarr," ");
                           for (x in iarr) {print mstr " " iarr[x];}}
                         }
                         c=0;m=0;
                        }
  ' >> $3.tmp

  ${CAT} $3.tmp | sort | e${GREP} -v "^out\/soong\/" > $3

  if [ ! "$2" == "host" ]; then
    ${MV} $3 $3.tmp
    ${CAT} $3.tmp | ${GREP} -v " out\/host\/" > $3
  fi
  ${RM} -f $3.tmp
}

if [ "$#" -eq 0 ]; then
    ${ECHO} "No ninja file name mentioned"
    exit 0
fi

while test $# -gt 0; do
    case "$1" in
        -h|--help)
        ${ECHO} "usage : ./QSSI_violators <ninja file path>"
        ${ECHO} "        Example : ./QSSI_violators out/build-sdm845.ninja"
        ${ECHO} "        -> for getting the list of violators based on QSSI_enforced_projects.txt and QSSI_whitelist.txt"
        ${ECHO} "           ./QSSI_violators <ninja file path> <component name string to grep>"
        ${ECHO} "        Example : ./QSSI_violators out/build-sdm845.ninja gfx or ./QSSI_violators out/build-sdm845.ninja display.lnx"
        ${ECHO} "        -> for getting the list of violators for the component corresponding to the component string\n\n"
        exit 0
        ;;
        *)
        break
        ;;
    esac
done

if [ ! -f $QSSI_ENFORCED_FILE ] | [ ! -f $QSSI_WHITELIST_FILE ] ; then
    ${ECHO} 'QSSI: not enforced for this target'
    exit 0
fi

# Generate the ninja-split files if they do not exist
if [ ! -f $OUT/qssi-system.txt ]; then
    ninja_split system $1 $OUT/qssi-system.txt
fi
if [ ! -f $OUT/qssi-vendor.txt ]; then
    ninja_split vendor $1 $OUT/qssi-vendor.txt
fi
if [ ! -f $OUT/qssi-root.txt ]; then
    ninja_split root $1 $OUT/qssi-root.txt
fi


# Search for violators based on QSSI_enforced_projects.txt and QSSI_whitelist.txt or based on component-name
if [ "$#" -eq 1 ]; then
    ${ECHO} "QSSI: Finding QSSI violators based on" "$QSSI_WHITELIST_FILE" "and" "$QSSI_ENFORCED_FILE" "..."

    ${AWK} 'ARGV[1] == FILENAME{a[$0];next} {for (i in a) {if(match($1,i)) print $0}}' $QSSI_ENFORCED_FILE $OUT/qssi-system.txt | ${AWK} '!x[$0]++' > violators.tmp
    ${AWK} 'ARGV[1] == FILENAME{a[$0];next} {for (i in a) {if(i == $0){c++}} if (c==0) {c=1; print $0} c=0;}' $QSSI_WHITELIST_FILE violators.tmp | ${AWK} '!x[$0]++' > $QSSI_VIOLATORS_OUTPUT_FILE

    if [ ! -s $QSSI_VIOLATORS_OUTPUT_FILE ]; then
        ${ECHO} "QSSI: no QSSI violators found !"
    else
        ${ECHO} "QSSI: violators are:"
        ${ECHO} "Start-->"
        ${CAT} $QSSI_VIOLATORS_OUTPUT_FILE
        ${ECHO} "<--End"
        ${ECHO} "QSSI: violators also written to" "$QSSI_VIOLATORS_OUTPUT_FILE"
    fi
else
    ${ECHO} "Finding QSSI violators ..."
    ${AWK} '!x[$0]++' violators.txt | ${TEE} $2.txt && ${ECHO} "\n\n"
    if [ ! -s $2.txt ]; then
        ${ECHO} "No QSSI violators found !"
    else
        ${ECHO} "QSSI violators written to" "$2"
    fi
    ${RM} violators.txt
fi

${RM} -f *.tmp
